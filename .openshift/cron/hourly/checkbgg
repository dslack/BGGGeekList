#!/usr/bin/env node

var dir = process.env.OPENSHIFT_REPO_DIR || '../';

var	request	=	require('request'),
	xml2js	=	require('xml2js'),
	_		=	require('lodash'),
	fs		=	require('fs-extra'),
	moment	=	require('moment'),
	Q		=	require('q');

	var parser = xml2js.parseString;

	var urls = {
		geeklist: 'https://www.boardgamegeek.com/xmlapi/geeklist/184821',
		games: 'https://www.boardgamegeek.com/xmlapi/boardgame/'
	};

	getGeekList()
		.then(transformData)
		.then(reorder)
		.then(getGameIds)
		.then(retrieveGames)
		.then(transformData)
		.then(stripGamesData)
		.then(saveGamesFile)
		.catch(function(err){
			console.error(err);
		});



	function getGeekList(){
		console.log("Retrieving Geeklist");
		return Q.Promise(function(resolve, reject){
			request.get(urls.geeklist, function(error, response,body){
				if (error) {
					reject(new Error(error));
				} else {
					resolve(body);
				}
			});	
		})
	}

	function transformData(body) {
		console.log("Transforming Data");
		return Q.Promise(function(resolve, reject){
			parser(body, function(error, xml){
				if (error) {
					reject(new Error(error));
				} else {
					resolve(xml);
				}
			});	
		});
	}

	function reorder(data) {
		console.log("Reorganizing List");
		return Q.Promise(function(resolve, reject){
			var items = data.geeklist.item;
			items = _.sortBy(items, function(n){
				var dt = moment(n.$.postdate, "ddd, DD MMM YYYY HH:mm:ss +0000")
				n.formatedPostDate = dt.toISOString();
				return dt.unix();
			}).reverse();
			fs.writeJSON(dir+'app/results.json', {refreshed: moment().toISOString(), items: items}, function(err){
				if (err) {
					reject(new Error(err));
				} else {
					resolve(items);
				}
			});
		})
	}

	function getGameIds(items) {
		console.log("Retrieving Game Ids");
		return Q.when(_.map(items, function(item){
			return item.$.objectid;
		}));
	}

	function retrieveGames(gameIds){
		console.log("Retrieving Games From BGG");
		return Q.Promise(function(resolve, reject){
			var params = gameIds.join(',');
			request.get(urls.games+params, function(error, response,body){
				if (error) {
					reject(new Error(error));
				} else {
					resolve(body);
				}
			})
		});
	}

	function stripGamesData(data) {
		//we only need some of the data.. the file gets too big otherwise...
		console.log("Stripping Game Data")
		var newData = _.map(data.boardgames.boardgame, function(game){
			return {objectid: game.$.objectid, description: game.description, publishers: game.boardgamepublisher, designers: game.boardgamedesigner}
		});
		return Q.when({boardgames: newData});
	}

	function saveGamesFile(data) {
		console.log("Saving Games List");
		return Q.Promise(function(resolve,reject){
			var games = data.boardgames;
			fs.writeJSON(dir+'/app/games.json', {refreshed: moment().toISOString(), boardgames: games}, function(err){
				if (err) {
					reject(new Error(err));
				} else {
					resolve(games);
				}
			})
		});
	}